/*
|-----------------------------------------
| Core CSS
|-----------------------------------------
 */

html, body {
    font-family: Open Sans, Arial, sans-serif;
    height: 100%;
    width:100%;
    margin: 0;
    padding: 0;
    background: #000;
    overflow: hidden;
    box-sizing: border-box;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/* reset all list items */
ul{
    list-style: none;
    padding: 0;
    margin: 0;
}

#container {
    width: 100%;
    height: 100%;
}

#main {
    position:absolute;
    top: 0px;
    left: 0px;
    right: 0px;
    bottom: 0px;
}

/*
|-----------------------------------------
| Canvas
|-----------------------------------------
|
| Classes are automatically overwritten 
| by the filter styles, therefore only
| attributes and id's can be used.
|
 */

canvas {
    margin: auto;
    display: block;
    padding: 0px;
    background-color: rgb(248, 248, 248);
    cursor: none;
}

canvas.textureSmooth {
    image-rendering: auto;
    image-rendering: optimizeQuality;
    -ms-interpolation-mode: bicubic;
}

canvas.texturePixelated {
    image-rendering: -webkit-optimize-contrast;
    image-rendering: -o-crisp-edges;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
    -ms-interpolation-mode: nearest-neighbor;
}

/*
|-----------------------------------------
| Messages
|-----------------------------------------
 */

.message {
    background: #6cc27d;
    padding: 1em 2em;
    text-align: center;
    color: #fff;
    bottom: 0px;
    position: fixed;
    left: 0px;
    display: none;
    font-weight: bold;
    vertical-align: bottom;
    font-family: monospace;
    z-index: 1;
}

/*
|-----------------------------------------
| Main Menu
|-----------------------------------------
 */

/* top level menu */
div#menu {
    position: absolute;
    z-index: 1;
    width: 100%;
    height: 0px;
}
.menu {
    position: fixed;
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    background: #fff;
    border-bottom: 1px solid rgba(0,0,0,.1);
    transition: .3s ease;
	cursor: pointer;
}

/* auto hide menu while playing */
.playing .menu{opacity: 0;}
.playing .menu:hover{opacity: 0.9;}

/* sub level menu */
.menu ul{
    visibility: hidden;
    opacity: 0;
    position: absolute;
    top:100%;
    left:0;
    background-color: rgb(245, 245, 245);
    box-shadow: 0 5px 10px 0 rgba(0,0,0,.1);
    transition: .3s ease;
    z-index: 1;
}

li.hide {
    display: none !important;
}

/* bottom level nav */
.menu ul ul{
    top:0;
    left: 100%;
}

#menu_top li {
    padding: .7em 1em;
}

.menu ul li {
    padding: .3em 1em !important;
}

.menu li{
    white-space: nowrap;
    position: relative;
    cursor:pointer;
}

.menu li:hover{
    background: rgba(0,0,0,.1);
}

/* show sub nav on hover */
.menu li:hover > ul{
    visibility: visible;
    opacity: 1;
}

/*
|-----------------------------------------
| Touch Controls
|-----------------------------------------
 */

var isTouchEnabled = "ontouchstart" in document.documentElement;

.touch-controls{
    display: flex;
    padding: 1em;
    position: absolute;
    bottom: 0px;
    left: 0px;
    right: 0px;
}

.touch-controls button{
    display: inline-block;
    -webkit-appearance: none;
    border:0;
    outline: 0;
    background: #fff;
    opacity: 0.7;
    width: 3em;
    height: 3em;
    line-height: 3em;
    text-align: center;
    cursor: pointer;
    transition: .1s ease;
    margin:.5em;
}

.touch-controls button:active{
    transform: scale(0.95);
    box-shadow: 0 0 10px 0 rgba(0,0,0,0.4) inset;
}

.touch-dpad, .touch-buttons{
    flex-grow: 1;
    text-align: center;
}

.touch-buttons{
    align-self: flex-end;
}

.touch-dpad--up{
    flex-grow: 1;
    width: 100%;
}

/* Only show controls on portrait mode screens */
@media screen and (min-aspect-ratio: 1/1) {
    .touch-controls{
        display: none;
    }
    #main {
        display: flex;
        justify-content: center;
        flex-grow: 1;
        align-items: center;
    }
	
	
// HTML Gamepad API support
// Poll for gamepad input about ~4 times per gameboy frame (~240 times second)
const GAMEPAD_POLLING_INTERVAL = 1000 / 60 / 4;
const GAMEPAD_KEYMAP_STANDARD_STR = "standard"

// When gamepad.mapping reports "standard"
const GAMEPAD_KEYMAP_STANDARD = [
            {gb_key: "b",      gp_button: 0,  type: "button"},
            {gb_key: "a",      gp_button: 1,  type: "button"},
            {gb_key: "select", gp_button: 8,  type: "button"},
            {gb_key: "start",  gp_button: 9,  type: "button"},
            {gb_key: "up",     gp_button: 12, type: "button"},
            {gb_key: "down",   gp_button: 13, type: "button"},
            {gb_key: "left",   gp_button: 14, type: "button"},
            {gb_key: "right",  gp_button: 15, type: "button"}
            ];

const GAMEPAD_KEYMAP_DEFAULT = [
            {gb_key: "a",      gp_button: 0, type: "button"},
            {gb_key: "b",      gp_button: 1, type: "button"},
            {gb_key: "select", gp_button: 2, type: "button"},
            {gb_key: "start",  gp_button: 3, type: "button"},
            {gb_key: "up",     gp_button: 2, type: "axis"},
            {gb_key: "down",   gp_button: 3, type: "axis"},
            {gb_key: "left",   gp_button: 0, type: "axis"},
            {gb_key: "right",  gp_button: 1, type: "axis"}
            ];

// gamepad related vars
var gp = {
        apiID: undefined,
        timerID: undefined,
        keybinds: undefined,
        axes: {
            last: undefined,
            cur: [],
            changed: [] },
        buttons: {
            last: undefined,
            cur: [],
            changed: [] }
        };


function bindButton(el, code) {
  el.addEventListener("touchstart", function(e) {
    e.preventDefault();
    e.stopPropagation();
    e.currentTarget.className = e.currentTarget.className + " btnPressed";
    GameBoyKeyDown(code);
  });

  el.addEventListener("touchend", function(e) {
    e.preventDefault();
    e.stopPropagation();
    initSound();
    e.currentTarget.className = e.currentTarget.className.replace(
      / btnPressed/,
      ""
    );
    GameBoyKeyUp(code);
  });
}

function bindDpad(el) {
  el.addEventListener("touchstart", function(e) {
    e.preventDefault();
    e.stopPropagation();
    var rect = e.currentTarget.getBoundingClientRect();
    var x = (2 * (e.targetTouches[0].clientX - rect.left)) / rect.width - 1;
    var y = (2 * (e.targetTouches[0].clientY - rect.top)) / rect.height - 1;
    move(x, y);
  });

  el.addEventListener("touchmove", function(e) {
    e.preventDefault();
    e.stopPropagation();
    var rect = e.currentTarget.getBoundingClientRect();
    var x = (2 * (e.targetTouches[0].clientX - rect.left)) / rect.width - 1;
    var y = (2 * (e.targetTouches[0].clientY - rect.top)) / rect.height - 1;
    move(x, y);
  });

  function move(x, y) {
    if (x < -DEADZONE || x > DEADZONE) {
      if (y > x && y < -x) {
        GameBoyKeyUp("right");
        GameBoyKeyDown("left");
      } else if (y > -x && y < x) {
        GameBoyKeyUp("left");
        GameBoyKeyDown("right");
      }

      if (y > -DEADZONE && y < DEADZONE) {
        GameBoyKeyUp("up");
        GameBoyKeyUp("down");
      }
    }

    if (y < -DEADZONE || y > DEADZONE) {
      if (x > y && x < -y) {
        GameBoyKeyUp("down");
        GameBoyKeyDown("up");
      } else if (x > -y && x < y) {
        GameBoyKeyUp("up");
        GameBoyKeyDown("down");
      }

      if (x > -DEADZONE && x < DEADZONE) {
        GameBoyKeyUp("left");
        GameBoyKeyUp("right");
      }
    }
  }

  el.addEventListener("touchend", function(e) {
    e.preventDefault();
    e.stopPropagation();
    initSound();
    GameBoyKeyUp("left");
    GameBoyKeyUp("right");
    GameBoyKeyUp("up");
    GameBoyKeyUp("down");
  });
}

function bindTouchRestore() {
  window.addEventListener("touchstart", function(e) {
    controller.style.display = "block";
    isTouchEnabled = true;
  })
}

function bindKeyboard() {
  window.onkeydown = function(e) {
    initSound();
    if (isTouchEnabled) {
      controller.style.display = "none";
      isTouchEnabled = false;
    }
    if (
      e.keyCode !== JS_KEY_CTRL &&
      e.keyCode !== JS_KEY_ALT &&
      (e.altKey || e.ctrlKey || e.metaKey)
    ) {
      return;
    }
    if (keyBindings[e.key]) {
      GameBoyKeyDown(keyBindings[e.key]);
    }
    e.preventDefault();
  };

  window.onkeyup = function(e) {
    if (e.key === "Dead") {
	
	    // more
	    
	    function gamepadCacheValues(gamepad) {

    // Read Buttons
    for(let k=0; k<gamepad.buttons.length; k++) {
        // .value is for analog, .pressed is for boolean buttons
        gp.buttons.cur[k] = (gamepad.buttons[k].value > 0 ||
                             gamepad.buttons[k].pressed == true);

        // Update state changed if not on first input pass
        if (gp.buttons.last !== undefined)
            gp.buttons.changed[k] = (gp.buttons.cur[k] != gp.buttons.last[k]);
    }

    // Read Axes
    for(let k=0; k<gamepad.axes.length; k++) {
        // Decode each dpad axis into two buttons, one for each direction
        gp.axes.cur[(k*2)  ] = (gamepad.axes[k] < 0);
        gp.axes.cur[(k*2)+1] = (gamepad.axes[k] > 0);

        // Update state changed if not on first input pass
        if (gp.axes.last !== undefined) {
            gp.axes.changed[(k*2)  ] = (gp.axes.cur[(k*2)  ] != gp.axes.last[(k*2)  ]);
            gp.axes.changed[(k*2)+1] = (gp.axes.cur[(k*2)+1] != gp.axes.last[(k*2)+1]);
        }
    }
	    // Save current state for comparison on next input
    gp.axes.last = gp.axes.cur.slice(0);
    gp.buttons.last = gp.buttons.cur.slice(0);
}


function gamepadHandleButton(keyBind) {

    var buttonCache;

    // Select button / axis cache based on key bind type
    if (keyBind.type === "button")
        buttonCache = gp.buttons;
    else if (keyBind.type === "axis")
        buttonCache = gp.axes;

    // Make sure the button exists in the cache array
    if (keyBind.gp_button < buttonCache.changed.length) {

        // Send the button state if it's changed
        if (buttonCache.changed[keyBind.gp_button])
            if (buttonCache.cur[keyBind.gp_button])
                GameBoyKeyDown(keyBind.gb_key);
            else
                GameBoyKeyUp(keyBind.gb_key);
    }
}


function gamepadGetCurrent() {

    // Chrome requires retrieving a new gamepad object
    // every time button state is queried (the existing object
    // will have stale button state). Just do that for all browsers
    var gamepad = navigator.getGamepads()[gp.apiID];

    if (gamepad)
        if (gamepad.connected)
            return gamepad;

    return undefined;
}


function gamepadUpdate() {

    var gamepad = gamepadGetCurrent();

    if (gamepad !== undefined) {

        // Cache gamepad input values
        gamepadCacheValues(gamepad);

        // Loop through buttons and send changes if needed
        for (let i=0; i<gp.keybinds.length; i++)
            gamepadHandleButton(gp.keybinds[i]);
    }
    else {
        // Gamepad is no longer present, disconnect
        gamepadStop();
    }
}


function gamepadStart(gamepad) {

    // Make sure it has enough buttons and axes
    if ((gamepad.mapping === GAMEPAD_KEYMAP_STANDARD_STR) ||
        ((gamepad.axes.length >= 2) && (gamepad.buttons.length >= 4))) {

        // Save API index for polling (required by Chrome/V8)
        gp.apiID   = gamepad.index;

        // Assign gameboy keys to the gamepad
        gamepadBindKeys(gamepad.mapping);

        // Start polling the gamepad for input
        gp.timerID = setInterval( () => gamepadUpdate(), GAMEPAD_POLLING_INTERVAL);
    }
}


function gamepadStop() {

    // Stop polling the gamepad for input
    if (gp.timerID !== undefined)
        clearInterval(gp.timerID);

    // Clear previous button history and controller info
    gp.axes.last = undefined;
    gp.buttons.last = undefined;
    gp.keybinds = undefined;

    gp.apiID = undefined;
}


function initGamePad()
{
    // When a gamepad connects, start polling it for input
    window.addEventListener("gamepadconnected", (event) => {
        initSound();
        gamepadStart( navigator.getGamepads()[event.gamepad.index] );
    });

    // When a gamepad disconnects, shut down polling for input
    window.addEventListener("gamepaddisconnected", (event) => {
        gamepadStop();
    });
}


initGamePad();    
}
